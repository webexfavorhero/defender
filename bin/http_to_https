#!/usr/bin/env node

var debug = require('debug')('http_to_https');

var http = require('http');
var nconf = require('nconf');
var express = require('express');

var log = require('../td_common/libs/log');
var config = require('../td_common/libs/config');

// redirect from HTTP to HTTPS
var app = express();
app.get('*', function (req,res) {
  return res.redirect('https://' + req.get('host') + req.url);
});


// Get port from environment and store in Express.
var port = normalizePort(nconf.get("http:port"));
debug('port = ' + port);
app.set('port', port);

// Create HTTP server.
var server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      log.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  log.info('Listening on ' + bind);
}

